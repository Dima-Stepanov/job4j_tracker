Для удобного анализа созданы два Action.
AutoCreateAction - добовляет указанное количестов заявок(имя генерируется изходя из порядкового номера).
AutoDeleteMemItem - удаляет указанное число заявок(орентирован на MemTracker, необходимо укозать количестов удоляемых заявок, желательно чтобы количестов захватывало диапозон номеров при повторном вызове).
Запускаем tracker, командой jps опридиляем pid (proccess id) = 5440 
параметры gc -Xlog:gc:.\data\gc\gc.log -Xmx100m -XX:+UseParallelGC

1. jmap Команда в основном орентированна на создание дампа. Но так же может покозать общее количество обьектов, при добовление ключа live выводит количество живых обьектов.
 Команда jmap -histo 5440. Получаем общее количество обьектов созданных в HEAP на момент запуска 128493, без учета дублекатов 1210, все это занимает 8393072 байта. (8 Мб).
 Доболяем 10000 обьектов повторяем команду результат получаем 295989 обьектов, из них уникальных 1208, занимаемая память 106 637 52 байта(10,16мб).
 Команда jmap -histo:live 5440 отражает все живые обьекты не помеченые на удаление GC.
 при добавленных 10000 обьектах. Живых 311622, уникальных 1167 занимают памяти на момент выполенения команды  10862416(10,18мб).
 Удаляем 10000 обьектов.
 jmap -histo 5440 создано обьектов 109345 из них уникальных 1238 занимают 6,05 мб.
 jmap -histo:live 5440 создано живых обьектов 7825 из них уникальных 1167 занимают 4,06 мб.
 
 так же как дополнение выполним команду jhsdb jmap --heap --pid 5440
 Получим: Детальную информацию о состоянии Heap.
 Attaching to process ID 5440, please wait...
Debugger attached successfully.
Server compiler detected.
JVM version is 16.0.2+7-67

using thread-local object allocation.
Parallel GC with 8 thread(s)

Heap Configuration:
   MinHeapFreeRatio         = 0
   MaxHeapFreeRatio         = 100
   MaxHeapSize              = 104857600 (100.0MB)
   NewSize                  = 34603008 (33.0MB)
   MaxNewSize               = 34603008 (33.0MB)
   OldSize                  = 70254592 (67.0MB)
   NewRatio                 = 2
   SurvivorRatio            = 8
   MetaspaceSize            = 21757952 (20.75MB)
   CompressedClassSpaceSize = 1073741824 (1024.0MB)
   MaxMetaspaceSize         = 17592186044415 MB
   G1HeapRegionSize         = 0 (0.0MB)
Heap Usage:
PS Young Generation
Eden Space:
   capacity = 19922944 (19.0MB)
   used     = 11538608 (11.004074096679688MB)
   free     = 8384336 (7.9959259033203125MB)
   57.91617945620888% used
From Space:
   capacity = 5242880 (5.0MB)
   used     = 98304 (0.09375MB)
   free     = 5144576 (4.90625MB)
   1.875% used
To Space:
   capacity = 5242880 (5.0MB)
   used     = 0 (0.0MB)
   free     = 5242880 (5.0MB)
   0.0% used
PS Old Generation
   capacity = 70254592 (67.0MB)
   used     = 4364952 (4.162742614746094MB)
   free     = 65889640 (62.837257385253906MB)
   6.213048678725513% used

2. Команда jstat воялет использовать раззличные части динамической памяти и количество загруженных классов.
Выполняем jstat -class 5440 
Loaded  Bytes  Unloaded  Bytes     Time
  2419  4908,1       79   109,1       0,26
Количество загруженных классов Loaded 2419.
Занато памяти Bytes 4908.1
Выгружено классов 79 в байтах 109,1
Время 0,26
Команда показывает статитстику сбора мусора jstat -gc 5440 1s 10 
Предворитенльно добавим 100_000 обьектов.
получим
    S0C         S1C         S0U         S1U          EC           EU           OC           OU          MC         MU       CCSC      CCSU     YGC     YGCT     FGC    FGCT     CGC    CGCT       GCT
     5632,0      5632,0         0,0      3392,0      21504,0       5157,0      68608,0      62106,2     8000,0     7624,6     960,0     750,5     43     0,176    12     0,147     -         -     0,323
     5632,0      5632,0         0,0      3392,0      21504,0       5459,2      68608,0      62106,2     8000,0     7624,6     960,0     750,5     43     0,176    12     0,147     -         -     0,323
     5632,0      5632,0         0,0      3392,0      21504,0       5578,2      68608,0      62106,2     8000,0     7624,6     960,0     750,5     43     0,176    12     0,147     -         -     0,323
     5632,0      5632,0         0,0      3392,0      21504,0       5762,9      68608,0      62106,2     8000,0     7624,6     960,0     750,5     43     0,176    12     0,147     -         -     0,323
     5632,0      5632,0         0,0      3392,0      21504,0       5881,5      68608,0      62106,2     8000,0     7624,6     960,0     750,5     43     0,176    12     0,147     -         -     0,323
     5632,0      5632,0         0,0      3392,0      21504,0       6184,1      68608,0      62106,2     8000,0     7624,6     960,0     750,5     43     0,176    12     0,147     -         -     0,323
     5632,0      5632,0         0,0      3392,0      21504,0       6303,6      68608,0      62106,2     8000,0     7624,6     960,0     750,5     43     0,176    12     0,147     -         -     0,323
     5632,0      5632,0         0,0      3392,0      21504,0       6488,3      68608,0      62106,2     8000,0     7624,6     960,0     750,5     43     0,176    12     0,147     -         -     0,323
     5632,0      5632,0         0,0      3392,0      21504,0       6606,9      68608,0      62106,2     8000,0     7624,6     960,0     750,5     43     0,176    12     0,147     -         -     0,323
     5632,0      5632,0         0,0      3392,0      21504,0       6844,9      68608,0      62106,2     8000,0     7624,6     960,0     750,5     43     0,176    12     0,147     -         -     0,323
     5632,0      5632,0         0,0      3392,0      21504,0       7029,1      68608,0      62106,2     8000,0     7624,6     960,0     750,5     43     0,176    12     0,147     -         -     0,323
     5632,0      5632,0         0,0      3392,0      21504,0       7147,6      68608,0      62106,2     8000,0     7624,6     960,0     750,5     43     0,176    12     0,147     -         -     0,323
     5632,0      5632,0         0,0      3392,0      21504,0       7331,3      68608,0      62106,2     8000,0     7624,6     960,0     750,5     43     0,176    12     0,147     -         -     0,323
     5632,0      5632,0         0,0      3392,0      21504,0       7569,3      68608,0      62106,2     8000,0     7624,6     960,0     750,5     43     0,176    12     0,147     -         -     0,323
     5632,0      5632,0         0,0      3392,0      21504,0       7753,4      68608,0      62106,2     8000,0     7624,6     960,0     750,5     43     0,176    12     0,147     -         -     0,323
	 
    S0C: размер первой выживающей области
    S1C: Размер второй выжившей области
    S0U: размер первой выжившей области
    S1U: размер второй выжившей области
    EC: размер Eden Park
    EU: используйте размер Eden Park
    OC: Размер старого поколения
    OU: размер использования старого поколения
    MC: размер области метода
    MU: Размер использования области метода
    CCSC: размер сжатого пространства класса
    CCSU: сжатый размер использования пространства класса
    YGC: молодое поколение собирает мусор
    YGCT: сборка мусора молодого поколения требует времени
    FGC: количество сборок мусора в старом поколении
    FGCT: сборка мусора старого времени требует времени
    GCT: общее время, затрачиваемое на сборку мусора
Статитстика кучи памяти.
jstat -gccapacity 5440
   NGCMN        NGCMX         NGC          S0C     S1C              EC         OGCMN        OGCMX         OGC           OC         MCMN       MCMX        MC       CCSMN     CCSMX     CCSC     YGC    FGC   CGC
      1536,0      33792,0      33792,0      5632,0      5632,0      21504,0        512,0      68608,0      68608,0      68608,0        0,0  1056768,0     8064,0       0,0 1048576,0     960,0     52    15     -
Общая статитстика сбора муссора
jstat -gcutil 5440
  S0     S1     E      O      M     CCS    YGC     YGCT     FGC    FGCT     CGC    CGCT       GCT
  0,00  12,50  46,94  77,81  95,62  78,99     54     0,186    15     0,522     -         -     0,708

3. jconsole
Так как команда представлет графическую реализацию для более наглядного отоброжения запустим ее с параметром -interval=1.
и перезапустим Tracer
Изменим параметры запуска JVM на -Xlog:gc:.\data\gc\gc.log -Xmx100m -XX:+UseG1GC
Запуск jconsole
jconsole -interval=1 
В покое система потребляет от 5 до 25 мб памяти 14-16 потокв, 2286 классов и нагрузку на ЦП не более 1%
Добавим 100000 обьектов.
Количестов потребляемой памяти поднялось до  82 мб, 
количестов потоков не изменилось 14, загруженно классов 2413,
из них 72 выгружено осталось 2341. Нагрузка на цп при добовлении составило 15%.
Удалим 100000 обьектов
Посел удаления всех обьектов потребляемая память снизилась до 17 мб, потоков используется 13.
класоов 2371 из них выгружено 49. нагрузка на цп при удалении составило 15%.

4. Пробуем добится выйти за пределы памяти. Перезапускаем Tracker и добовляем 1 милион заявок.
Из консоли выполнения программы видим что java.lang.OutOfMemoryError,
 произошло на добовлении 158892 заявки.
 Exception in thread "main" java.lang.OutOfMemoryError: Java heap space
        at java.base/java.lang.StringUTF16.newString(StringUTF16.java:1179)
        at java.base/java.lang.StringBuilder.toString(StringBuilder.java:450)
        at java.base/java.util.Formatter.toString(Formatter.java:2525)
        at java.base/java.lang.String.format(String.java:4140)
        at ru.job4j.tracker.model.Item.toString(Item.java:79)
        at java.base/java.lang.StringConcatHelper.stringOf(StringConcatHelper.java:453)
        at java.base/java.lang.StringConcatHelper.simpleConcat(StringConcatHelper.java:408)
        at java.base/java.lang.invoke.DirectMethodHandle$Holder.invokeStatic(DirectMethodHandle$Holder)
        at java.base/java.lang.invoke.LambdaForm$MH/0x0000000800c08c00.invoke(LambdaForm$MH)
        at java.base/java.lang.invoke.Invokers$Holder.linkToTargetMethod(Invokers$Holder)
        at ru.job4j.tracker.action.AutoCreatAction.execute(AutoCreatAction.java:47)
        at ru.job4j.tracker.StartUI.init(StartUI.java:59)
        at ru.job4j.tracker.StartUI.main(StartUI.java:94)
Нагрузка на цп составило 25%.

Вывод: Так как все заявки хронятся в памяти,
то размер Heap на прямую зовисит от каличества добавленых заявок,
вне зависимости от используемого GC 
количество занимаемой памяти будет увеличиватся линейно пока не достигнет предела.
Преимущестов использования внешней БД очевиден.
В целом приложение Tracker работает стабильно и предсказуемо.
общая статистика
VM Summary
четверг, 20 января 2022 г., 17:44:59 Москва, стандартное время
Connection name: 
pid: 4600 Tracker.jar
Virtual Machine: 
Java HotSpot(TM) 64-Bit Server VM version 17.0.1+12-LTS-39
Vendor: 
Oracle Corporation
Name: 
4600@inv39
Uptime: 
42,203 seconds
Process CPU time: 
10,750 seconds
JIT compiler: 
HotSpot 64-Bit Tiered Compilers
Total compile time: 
2,743 seconds
 
Live threads: 
16
Peak: 
16
Daemon threads: 
15
Total threads started: 
16
Current classes loaded: 
2 313
Total classes loaded: 
2 425
Total classes unloaded: 
  112


 
Current heap size: 
  4 865 kbytes
Maximum heap size: 
102 400 kbytes
Committed memory: 
20 480 kbytes
Pending finalization: 
0 objects
Garbage collector: 
Name = 'G1 Young Generation', Collections = 77, Total time spent = 0,237 seconds
Garbage collector: 
Name = 'G1 Old Generation', Collections = 20, Total time spent = 1,718 seconds
 
Operating System: 
Windows 10 10.0
Architecture: 
amd64
Number of processors: 
8
Committed virtual memory: 
115 932 kbytes
Total physical memory: 
14 612 500 kbytes
Free physical memory: 
 7 698 636 kbytes
Total swap space: 
16 840 724 kbytes
Free swap space: 
 7 976 236 kbytes
 
VM arguments: 
-Xmx100m -XX:+UseG1GC 
Class path: 
Tracker.jar
Library path: 
C:\Program Files\Java\jdk-17.0.1\bin;C:\WINDOWS\Sun\Java\bin;C:\WINDOWS\system32;C:\WINDOWS;C:\Program Files\Common Files\Oracle\Java\javapath;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\WINDOWS\System32\WindowsPowerShell\v1.0\;C:\WINDOWS\System32\OpenSSH\;C:\Program Files\Java\jdk-16.0.2\bin;C:\Tools\apache-maven-3.8.3\bin;C:\Program Files\PuTTY\;C:\Program Files\Git\cmd;C:\Program Files\PostgreSQL\14\bin;C:\Users\Dmitry\AppData\Local\Microsoft\WindowsApps;;C:\Program Files\Microsoft Office\root\Client;.
Boot class path: 
Unavailable




